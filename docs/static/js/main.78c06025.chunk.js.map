{"version":3,"sources":["components/add-category.js","helpers/get-gifs.js","components/gif-grid-item.js","components/gif-grid.js","hooks/use-fetch-gifs.js","GifExpertApp.js","reportWebVitals.js","index.js"],"names":["AddCategory","setCategorias","useState","inputValue","setInputValue","onSubmit","e","preventDefault","trim","length","cats","type","value","onChange","target","handleChange","getGifs","category","a","url","encodeURI","fetch","res","json","data","gifs","map","img","id","title","images","downsized_medium","GifGridItem","className","src","alt","GifGrid","loading","state","setstate","useEffect","then","imgs","useFetchGifs","GifExpertApp","categorias","index","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"4MAGaA,EAAc,SAAC,GAAoB,IAAnBC,EAAkB,EAAlBA,cAAkB,EACPC,mBAAS,IADF,mBACpCC,EADoC,KACxBC,EADwB,KAe3C,OAAO,sBAAMC,SARQ,SAACC,GAClBA,EAAEC,iBACCJ,EAAWK,OAAOC,OAAS,IAC1BR,GAAc,SAAAS,GAAI,OAAKP,GAAL,mBAAoBO,OACtCN,EAAc,OAIf,SACH,uBAAOO,KAAK,OAAOC,MAAOT,EAAYU,SAAU,SAACP,GAAD,OAb/B,SAACA,GAClBF,EAAcE,EAAEQ,OAAOF,OAYgCG,CAAaT,S,+BCjB9DU,EAAO,uCAAG,WAAOC,GAAP,uBAAAC,EAAA,6DACdC,EADc,iDACkCC,UAAUH,GAD5C,+DAEFI,MAAMF,GAFJ,cAEdG,EAFc,gBAGCA,EAAIC,OAHL,uBAGbC,EAHa,EAGbA,KACDC,EAAOD,EAAKE,KAAK,SAAAC,GAAQ,IAAD,EAC1B,MAAM,CACFC,GAAGD,EAAIC,GACPC,MAAMF,EAAIE,MACVV,IAAG,UAACQ,EAAIG,cAAL,aAAC,EAAYC,iBAAiBZ,QARrB,kBAWbM,GAXa,4CAAH,sDCARO,EAAc,SAAC,GAAiB,IAAhBH,EAAe,EAAfA,MAAMV,EAAS,EAATA,IAC/B,OACI,sBAAKc,UAAU,yCAAf,UACI,qBAAKC,IAAKf,EAAKgB,IAAKN,IACpB,4BAAIA,QCHHO,EAAU,SAAC,GAAgB,IAAfnB,EAAc,EAAdA,SAAc,ECCX,SAACA,GAAc,IAAD,EACZf,mBAAS,CAC/BsB,KAAK,GACLa,SAAQ,IAH0B,mBAC/BC,EAD+B,KACxBC,EADwB,KAgBtC,OAVAC,qBAAU,WACNxB,EAAQC,GACPwB,MAAK,SAAAC,GACFH,EAAS,CACLf,KAAKkB,EACLL,SAAQ,SAGlB,CAACpB,IAEIqB,EDhB0BK,CAAa1B,GAAjCa,EADsB,EAC3BN,KAAaa,EADc,EACdA,QAErB,OACI,qCACI,oBAAIJ,UAAU,oCAAd,SAAmDhB,IAClDoB,GAAS,mBAAGJ,UAAU,mCAAb,wBACV,qBAAKA,UAAU,YAAf,SACKH,EAAOJ,KAAI,SAAAC,GAAG,OACX,cAAC,EAAD,eAEQA,GADCA,EAAIC,aERpBgB,EAAe,WAAO,IAAD,EACM1C,mBAAS,CAAC,UADhB,mBACvB2C,EADuB,KACX5C,EADW,KAG9B,OACI,gCACI,gDACA,uBACA,cAAC,EAAD,CAAaA,cAAeA,IAC5B,6BACK4C,EAAWnB,KAAI,SAAST,EAAS6B,GAC9B,OACI,cAAC,EAAD,CAAwB7B,SAAUA,GAApBA,YCJvB8B,G,MAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBR,MAAK,YAAkD,IAA/CS,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,QCAdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.78c06025.chunk.js","sourcesContent":["import React, {useState} from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nexport const AddCategory = ({setCategorias}) =>{\r\n    const [inputValue, setInputValue] = useState('');\r\n\r\n    const handleChange = (e) => {\r\n        setInputValue(e.target.value);\r\n    }\r\n\r\n    const handleSubmit = (e) => {\r\n        e.preventDefault();\r\n        if(inputValue.trim().length > 2){\r\n            setCategorias(cats => [inputValue, ...cats ]);\r\n            setInputValue(' ');\r\n        }\r\n    }\r\n\r\n    return <form onSubmit={handleSubmit}>\r\n        <input type='text' value={inputValue} onChange={(e) => handleChange(e)}/>\r\n        {/* <input type='submit' value='Adicionar'/> */}\r\n    </form>\r\n}\r\nAddCategory.propTypes = {\r\n    setCategorias: PropTypes.func.isRequired\r\n}","\r\n\r\n export const getGifs = async (category) => {\r\n    const url = `https://api.giphy.com/v1/gifs/search?q=${encodeURI(category)}&limit=10&api_key=ZC6yk3xICEeyPEU7hq0c5OFD4tXy4u1K`;\r\n    const res = await fetch(url);\r\n    const {data} = await res.json();\r\n    const gifs = data.map (img => {\r\n        return{\r\n            id:img.id,\r\n            title:img.title,\r\n            url:img.images?.downsized_medium.url,\r\n        }\r\n    })\r\n    return gifs;\r\n}","import React from \"react\";\r\n\r\nexport const GifGridItem = ({title,url}) => {\r\n    return (\r\n        <div className='card animate__animated animate__fadeIn'>\r\n            <img src={url} alt={title}/>\r\n            <p>{title}</p>\r\n        </div>\r\n    );\r\n}","import { useFetchGifs } from '../hooks/use-fetch-gifs'\r\nimport { GifGridItem } from './gif-grid-item';\r\n\r\nexport const GifGrid = ({category}) => {\r\n    const { data:images, loading } = useFetchGifs(category);\r\n\r\n    return (\r\n        <>\r\n            <h3 className='animate__animated animate__fadeIn'>{category}</h3>\r\n            {loading&&<p className='animate__animated animate__flash'>Loading...</p>}\r\n            <div className='card-grid'>\r\n                {images.map(img => \r\n                    <GifGridItem\r\n                        key={img.id}\r\n                        {...img}\r\n                    />\r\n                )}\r\n            </div>\r\n        </>\r\n    )\r\n}\r\n","\r\nimport { useEffect, useState } from 'react';\r\nimport { getGifs } from '../helpers/get-gifs';\r\n\r\nexport const useFetchGifs = (category) => {\r\n    const [state, setstate] = useState({\r\n        data:[],\r\n        loading:true\r\n    });\r\n\r\n    useEffect(()=>{\r\n        getGifs(category)\r\n        .then(imgs =>{\r\n            setstate({\r\n                data:imgs,\r\n                loading:false\r\n            });    \r\n        })\r\n    },[category]);\r\n\r\n    return state;\r\n}","import React from 'react'\r\nimport { useState } from 'react';\r\nimport { AddCategory } from './components/add-category';\r\nimport { GifGrid } from './components/gif-grid';\r\n\r\nexport const GifExpertApp = () => {\r\n    const [categorias, setCategorias] = useState(['anime']);\r\n    \r\n    return (\r\n        <div>\r\n            <h2>Gif Expert App</h2>\r\n            <hr/>\r\n            <AddCategory setCategorias={setCategorias}/>\r\n            <ol>\r\n                {categorias.map(function(category,index){\r\n                    return (\r\n                        <GifGrid key={category} category={category}/>\r\n                    )\r\n                })}\r\n            </ol>\r\n            \r\n        </div>\r\n    )\r\n}\r\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { GifExpertApp } from './GifExpertApp';\nimport './index.css';\n\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <GifExpertApp/>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}